//@version=5
// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------
// 
// Made by Micke "mikul" Pollak  
// admin@mikul.se
//
// Lite version of my combo indicator. Some stuff have been removed because of slow loading time.
// 
// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------


// Lets start! ---------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------
indicator(shorttitle="mikul's combo indicator (lite)", title="mikul's combo indicator (lite)", overlay=true)


// Quick toggle --------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

showbb = input.bool(true, title='Show Bollinger Bands', group='Quick toggle')
showichi = input.bool(true, title='Show Ichimoku cloud', group='Quick toggle')
showichisignal = input.bool(true, title='Show Ichimoku cross signal 1', group='Quick toggle')
showichisignal2 = input.bool(false, title='Show Ichimoku cross signal extra', group='Quick toggle')
showlag = input.bool(false, title='Show Chikou span at cross at last confirmed positive cross', group='Quick toggle')
showema = input.bool(true, title='Show EMAs', group='Quick toggle')
showma = input.bool(true, title='Show SMAs', group='Quick toggle')

showsuper = input.bool(false, title='Show supertrend', group='Quick toggle')
showsupersignals = input.bool(false, title='Show supertrend signals', group='Quick toggle')

showMACD = input.bool(false, title='Show background color at MacD Cross', group='Quick toggle')
showSARBG = input.bool(false, title='Show SAR background color', group='Quick toggle')
showSARPlot = input.bool(false, title='Show SAR', group='Quick toggle')

show_ma1hlines = input.bool(false, 'Show Ma horizontal line 1', group='Quick toggle', inline = "03")
ma1linecolor = input.color(color.new(#fff000, 0), "", group= 'Quick toggle', inline = "03" )

ma1len = input.int(10, minval=1, title='MA line 1 length', group='Quick toggle', inline = "04")
tf1 = input.timeframe(title="Ma line 1 time frame", defval="1D",group='Quick toggle', inline = "05")
MA1lineType = input.string(title='Ma line 1 type', defval='EMA', options=['EMA', 'SMA', 'WMA', 'HMA', 'VWMA', 'VWAP'], group='Quick toggle', inline = "07")

show_ma2hlines = input.bool(false, 'Show Ma horizontal line 2', group='Quick toggle', inline = "08")
ma2linecolor = input.color(color.new(#e91e63, 0), "", group= 'Quick toggle', inline = "08" )

ma2len = input.int(21, minval=1, title='MA line 2 length', group='Quick toggle', inline = "10")
tf2 = input.timeframe(title="Ma line 2 time frame", defval="1D",group='Quick toggle', inline = "11")
MA2lineType = input.string(title='Ma line 2 type', defval='EMA', options=['EMA', 'SMA', 'WMA', 'HMA', 'VWMA', 'VWAP'], group='Quick toggle', inline = "13")

// ---------------------------------------------------------------------------------------------------------------------


// Bollinger bands: ----------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

length = input.int(20, minval=1, group='Bollinger bands')
src = input.source(close, title='Source', group='Bollinger bands')
mult = input.float(2.0, minval=0.001, maxval=50, title='StdDev', group='Bollinger bands')
basis = ta.sma(src, length)
dev = mult * ta.stdev(src, length)
upper = basis + dev
lower = basis - dev
offset = input.int(0, 'Offset', minval=-500, maxval=500, group='Bollinger bands')

plot(showbb ? basis : na, 'BB Basis', color=color.new(#d1d4dc, 0), offset=offset, linewidth=2)

p11 = plot(showbb ? upper : na, 'BB Upper', color=color.new(#b2b5be, 0), offset=offset, linewidth=1)  //#e91e63 
p22 = plot(showbb ? lower : na, 'BB Lower', color=color.new(#b2b5be, 0), offset=offset, linewidth=1)
if showbb == true
    p11 = false
    p22 = false
    p22

fill(p11, p22, title='Bollinger bands background', color=color.new(#b2b5be, 94))  // nice colors #00bcd4 #da00ff

// ---------------------------------------------------------------------------------------------------------------------


// Ichimoku cloud ------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

conversionPeriods = input.int(9, minval=1, title='Conversion Line Length', group='Ichimoku Cloud')
basePeriods = input.int(26, minval=1, title='Base Line Length', group='Ichimoku Cloud')
laggingSpan2Periods = input.int(52, minval=1, title='Lagging Span 2 Length', group='Ichimoku Cloud')
displacement = input.int(26, minval=1, title='Displacement', group='Ichimoku Cloud')
donchian(len) =>
    math.avg(ta.lowest(len), ta.highest(len))

conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)

ichiup = ta.crossover(conversionLine, baseLine)
ichidown = ta.crossover(baseLine, conversionLine)

plotshape(ichiup ? conversionLine : na, 'Ichi long 1', style=shape.circle, location=location.absolute,offset=0, color=#00ff00, size=size.small, transp=showichisignal ? 0 : 100)  // if you want to change size, you can switch out size.small to size.tiny or size.normal or size.large or size.huge
plotshape(ichidown ? conversionLine : na, 'Ichi short 1', style=shape.circle, location=location.absolute,offset=0, color=#ff1100, size=size.small, transp=showichisignal ? 0 : 100)  // if you want to change size, you can switch out size.small to size.tiny or size.normal or size.large or size.huge

plotshape(ichiup ? conversionLine : na, 'Ichi long 2', style=shape.triangleup, location=location.bottom,offset=1, color=#00ff00, size=size.small, transp=showichisignal2 ? 50 : 100)  // if you want to change size, you can switch out size.small to size.tiny or size.normal or size.large or size.huge
plotshape(ichidown ? conversionLine : na, 'Ichi short 2', style=shape.triangleup, location=location.bottom,offset=1, color=#ff1100, size=size.small, transp=showichisignal2 ? 50 : 100)  // if you want to change size, you can switch out size.small to size.tiny or size.normal or size.large or size.huge


// ---------------------------------------------------------------------------------------------------------------------
// New lagging span label ----------------------------------------------------------------------------------------------

if showlag == true
    if ichiup
        var Label = label.new(x=na, y=na, yloc=yloc.abovebar, color=color.green, textcolor=color.new(color.lime, 0), size=size.tiny, style=label.style_arrowdown, color=color.lime)
        LbText = 'Chikou'
        label.set_size(id=Label, size=size.small)
        label.set_text(id=Label, text=LbText)
        label.set_x(id=Label, x=bar_index[26])
        
// ---------------------------------------------------------------------------------------------------------------------


plot(showichi ? conversionLine : na, color=color.new(#80deea, 0), title='Tenkan', linewidth=1)  // 00e2ff 009688
plot(showichi ? baseLine : na, color=color.new(#801922, 0), title='Kijun', linewidth=2)  // ff1100 801922 f44336
plot(showichi ? close : na, offset=-displacement + 1, color=color.new(#00ff00, 25), title='Chikou (Lagging) span')  // #459915

p1 = plot(showichi ? leadLine1 : na, offset=displacement - 1, color=color.new(#66bb6a, 15), title='Ichi Lead 1') //4CAF50
p2 = plot(showichi ? leadLine2 : na, offset=displacement - 1, color=color.new(#FF5252, 15), title='Ichi Lead 2')

if showichi == true
    p1 = false
    p2 = false
    p2

fill(p1, p2, color=leadLine1 > leadLine2 ? color.new(#4CAF50, 85) : color.new(#FF5252, 85), transp=90, title='Ichi background')

// ---------------------------------------------------------------------------------------------------------------------



// Moving averages: ----------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------


// ---------------------------------------------------------------------------------------------------------------------
// EMA -----------------------------------------------------------------------------------------------------------------

MA1Period = input.int(10, title='MA 1 Period (EMA 10)', group='Show EMAs')
MA1Type = input.string(title='MA 1 Type', defval='EMA', options=['EMA', 'SMA', 'WMA', 'HMA', 'VWMA', 'VWAP'], group='Show EMAs')

MA2Period = input.int(50, title='MA 2 Period (EMA 50)', group='Show EMAs')
MA2Type = input.string(title='MA 2 Type', defval='EMA', options=['EMA', 'SMA', 'WMA', 'HMA', 'VWMA', 'VWAP'], group='Show EMAs')

MA3Period = input.int(200, title='MA 3 Period (EMA 200)', group='Show EMAs')
MA3Type = input.string(title='MA 3 Type', defval='EMA', options=['EMA', 'SMA', 'WMA', 'HMA', 'VWMA', 'VWAP'], group='Show EMAs')

MA4Period = input.int(21, title='MA 4 Period (EMA 21)', group='Show EMAs')
MA4Type = input.string(title='MA 4 Type', defval='EMA', options=['EMA', 'SMA', 'WMA', 'HMA', 'VWMA', 'VWAP'], group='Show EMAs')

// ---------------------------------------------------------------------------------------------------------------------
// SMA -----------------------------------------------------------------------------------------------------------------

MA5Period = input.int(7, title='MA 5 Period (SMA 7)', group='Show SMAs')
MA5Type = input.string(title='MA 5 Type', defval='SMA', options=['EMA', 'SMA', 'WMA', 'HMA', 'VWMA', 'VWAP'], group='Show SMAs')

MA6Period = input.int(50, title='MA 6 Period (SMA 50)', group='Show SMAs')
MA6Type = input.string(title='MA 6 Type', defval='SMA', options=['EMA', 'SMA', 'WMA', 'HMA', 'VWMA', 'VWAP'], group='Show SMAs')

MA7Period = input.int(100, title='MA 7 Period (SMA 100)', group='Show SMAs')
MA7Type = input.string(title='MA 7 Type', defval='SMA', options=['EMA', 'SMA', 'WMA', 'HMA', 'VWMA', 'VWAP'], group='Show SMAs')

MA8Period = input.int(128, title='MA 8 Period (SMA 128)', group='Show SMAs')
MA8Type = input.string(title='MA 8 Type', defval='SMA', options=['EMA', 'SMA', 'WMA', 'HMA', 'VWMA', 'VWAP'], group='Show SMAs')

MA9Period = input.int(200, title='MA 9 Period (SMA 200)', group='Show SMAs')
MA9Type = input.string(title='MA 9 Type', defval='SMA', options=['EMA', 'SMA', 'WMA', 'HMA', 'VWMA', 'VWAP'], group='Show SMAs')



getMA(simple int length, string maType) =>
    switch maType
        "EMA" => ta.ema(close, length)
        "SMA" => ta.sma(close, length)
        "HMA" => ta.hma(close, length)
        "WMA" => ta.wma(close, length)
        "VWMA" => ta.vwma(close, length)
        "VWAP" => ta.vwap
        => 
            e1 = ta.ema(close, length)
            e2 = ta.ema(e1, length)
            2 * e1 - e2


MA1 = getMA(MA1Period, MA1Type)
MA2 = getMA(MA2Period, MA2Type)
MA3 = getMA(MA3Period, MA3Type)
MA4 = getMA(MA4Period, MA4Type)

MA5 = getMA(MA5Period, MA5Type)
MA6 = getMA(MA6Period, MA6Type)
MA7 = getMA(MA7Period, MA7Type)
MA8 = getMA(MA8Period, MA8Type)
MA9 = getMA(MA9Period, MA9Type)


// ---------------------------------------------------------------------------------------------------------------------
// Plot moving averages ------------------------------------------------------------------------------------------------

plot(showema ? MA1 : na, color=color.new(#fff000, 0), linewidth=3, title='(EMA 10)')
plot(showema ? MA2 : na, color=color.new(color.green, 0), linewidth=4, title='(EMA 50)')
plot(showema ? MA3 : na, color=color.new(color.white, 0), linewidth=4, title='(EMA 200)')
plot(showema ? MA4 : na, color=color.new(#e91e63, 0), linewidth=3, title='(EMA 21)')
plot(showema ? MA5 : na, color=color.new(#ff1100, 0), linewidth=2, title='(SMA 7)')
plot(showma ? MA6 : na, color=color.new(color.orange, 0), linewidth=1, title='(SMA 50)')
plot(showma ? MA7 : na, color=color.new(#9c27b0, 0), linewidth=1, title='(SMA 100)')
plot(showma ? MA8 : na, color=color.new(#0044ff, 0), linewidth=1, title='(SMA 128)')
plot(showma ? MA9 : na, color=color.new(#26a69a, 0), linewidth=1, title='(SMA 200)')


// New stuff. MacD-cross signal and SAR with up and down colors plus SAR up background color ---------------------------
// ---------------------------------------------------------------------------------------------------------------------


// ---------------------------------------------------------------------------------------------------------------------
// MacD crossing signal ------------------------------------------------------------------------------------------------

FastLength = input.int(12, 'MACD Fast Length', group='MacD Settings')
SlowLength = input.int(26, 'MACD Slow Length', group='MacD Settings')
SignalSmoothing = input.int(9, 'MACD Signal Smoothing', group='MacD Settings')

MACDFast = ta.ema(close, FastLength)
MACDSlow = ta.ema(close, SlowLength)
MACD = MACDFast - MACDSlow
Signal = ta.ema(MACD, SignalSmoothing)
MACDCondition = ta.crossover(MACD, Signal)
MACDConditionDown = ta.crossunder(MACD, Signal)

bgcolor(title='MacD up background', color=MACDCondition and showMACD ? color.new(color.green, 94) : na)
bgcolor(title='MacD down background', color=MACDConditionDown and showMACD ? color.new(#f44336, 93) : na )

// ---------------------------------------------------------------------------------------------------------------------


// ---------------------------------------------------------------------------------------------------------------------
// SAR and SAR-Background color ----------------------------------------------------------------------------------------

SARStart = input.float(0.02, 'SAR Start', group='SAR Settings')
SARInc = input.float(0.02, 'SAR Increment', group='SAR Settings')
SARMax = input.float(0.2, 'SAR Max Value', group='SAR Settings')

SAR = ta.sar(SARStart, SARInc, SARMax)
SARCondition = close > SAR

bgcolor(title='SAR background', color=SARCondition and showSARBG ? color.new(color.green, 98) : na )

plot(SAR,title='SAR up color', style=plot.style_cross, color=showSARPlot ? SARCondition ? color.new(color.green, 0) : na : na)
plot(SAR,title='SAR down color', style=plot.style_cross, color=showSARPlot ? SARCondition ? na : color.new(color.red, 0) : na )


// ---------------------------------------------------------------------------------------------------------------------


// ---------------------------------------------------------------------------------------------------------------------
// Super trend with buy and sell signals  ------------------------------------------------------------------------------

atrPeriod = input(10, "ATR Length")
factor = input.float(3.0, "Factor", step = 0.01)

[supertrend, direction] = ta.supertrend(factor, atrPeriod)

plotshape(ta.change(direction) < 0 ? supertrend : na, title="Super uptrend begins", location=location.absolute, style=shape.circle, size=size.tiny, color=showsuper ? color.new(color.green, 0) : na)
plotshape(showsupersignals and ta.change(direction) < 0 ? supertrend : na, title="Super-buy-lable", text="Buy", location=location.absolute, style=shape.labelup, size=size.tiny, color=color.green, textcolor=color.white)

plotshape(ta.change(direction) > 0 ? supertrend : na, title="Super-downtrend begins", location=location.absolute, style=shape.circle, size=size.tiny, color=showsuper ? color.new(color.red, 0) : na)
plotshape(showsupersignals and ta.change(direction) > 0 ? supertrend : na, title="Super-sell-lable", text="Sell", location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.red, textcolor=color.white)


bodyMiddle = plot((open + close) / 2, display=display.none)
upTrend = plot(direction < 0 ? supertrend : na, "Super uptrend (lines)", color=showsuper ? color.new(#00ff00, 0) : na, style=plot.style_linebr)
downTrend = plot(direction < 0? na : supertrend, "Super downtrend (lines)", color=showsuper ? color.new(#ff1100, 0) : na, style=plot.style_linebr)

fill(bodyMiddle, upTrend, title="Super uptrend (background)", color=showsuper ? color.new(#00ff00, 90) : na, fillgaps=false)
fill(bodyMiddle, downTrend, title="Super downtrend (background)", color=showsuper ? color.new(#ff1100, 90) : na, fillgaps=false)


// ---------------------------------------------------------------------------------------------------------------------


// ---------------------------------------------------------------------------------------------------------------------
// Ma 1 lines ----------------------------------------------------------------------------------------------------------

theMA1 = getMA(ma1len, MA1lineType)
out = theMA1 

s1 = request.security(syminfo.tickerid, show_ma1hlines ? tf1 : "1", out, gaps=barmerge.gaps_off)
ma1MA = float(s1)

f_moveLine(_id, _x, _y) =>
    line.set_xy1(_id, _x, _y)
    line.set_xy2(_id, _x + 1, _y)

f_moveLabel(_id, _x, _y) =>
    label.set_xy(_id, _x, _y)

var color_ma1MA = ma1linecolor
var line_ma1MA = line.new(x1=na, y1=na, x2=na, y2=na, xloc=xloc.bar_time, extend=extend.right, color=show_ma1hlines ? color_ma1MA : na, style=line.style_dashed)
var label_ma1MA = label.new(x=na, y=na, text=str.tostring(ma1len) + ' ' + MA1lineType + ' ' + tf1, xloc=xloc.bar_time, color=show_ma1hlines ? color_ma1MA : na, textcolor=show_ma1hlines ? color_ma1MA : na, style=label.style_none)


if hour == 0 and minute == 0 and year(time) == year(timenow) and month(time) == month(timenow) and dayofmonth(time) == dayofmonth(timenow)
    f_moveLine(line_ma1MA, time, ma1MA)
    f_moveLabel(label_ma1MA, time, ma1MA)


// ---------------------------------------------------------------------------------------------------------------------
// Ma 2 lines ----------------------------------------------------------------------------------------------------------


theMA2 = getMA(ma2len, MA2lineType)
out2 = theMA2 
s2 = request.security(syminfo.tickerid, show_ma2hlines ? tf2 : "1", out2, gaps=barmerge.gaps_off)
ma2MA = float(s2)


//var bool show_ma1lines = not show_ma1hlines
var color_ma2MA = ma2linecolor
var line_ma2MA = line.new(x1=na, y1=na, x2=na, y2=na, xloc=xloc.bar_time, extend=extend.right, color=show_ma2hlines ? color_ma2MA : na, style=line.style_dashed)
var label_ma2MA = label.new(x=na, y=na, text=str.tostring(ma2len) + ' ' + MA2lineType + ' ' + tf2, xloc=xloc.bar_time, color=show_ma2hlines ? color_ma2MA : na, textcolor=show_ma2hlines ? color_ma2MA : na, style=label.style_none)


if hour == 0 and minute == 0 and year(time) == year(timenow) and month(time) == month(timenow) and dayofmonth(time) == dayofmonth(timenow)
    f_moveLine(line_ma2MA, time, ma2MA)
    f_moveLabel(label_ma2MA, time, ma2MA)


// ---------------------------------------------------------------------------------------------------------------------
